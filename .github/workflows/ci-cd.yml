name: Full Stack CI/CD

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: reda
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Wait for MySQL to be ready and create schema
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {30..0}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -preda --silent; then
              break
            fi
            echo "MySQL is unavailable - sleeping"
            sleep 1
          done

          echo "Creating database schema..."
          mysql -h 127.0.0.1 -uroot -preda -e "create database pfe;
                                              use pfe;
                                              create table Utilisateur(immatricule int primary key, login varchar(50), pwd varchar(50), nom varchar(50), prenom varchar(50), email varchar(50), fonction varchar(50), sexe varchar(50));
                                              create table EB(num  int primary key auto_increment, etat varchar(50), objet varchar(50), agence varchar(50), observation varchar(50), prog_nonprog varchar(50), classe varchar(50), caution double, estimation double, dateEB date, modePassation varchar(50), dateValidation date, validerPar varchar(50), numUtilisateur int, secteur varchar(50), qualification varchar(50));
                                              create table Operation(code int primary key auto_increment, agence varchar(50), DA int, imputation varchar(50), natureProjet varchar(50), operation varchar(50), programme varchar(50), situation varchar(50), superficie varchar(50), typeProjet varchar(50), numEB int);
                                              create table Piece(num int primary key auto_increment, libelle varchar(50), piece longblob, base64 Text, content Text, fileName varchar(50), numEB int);
                                              create table AO(num varchar(50) primary key, dateOuverturePlis date, heureOuverturePlis timestamp, datePublicationPortail date, dateEntreDM date, dateAchevementTravauxCommission date, avis longblob, fileName varchar(50), numEB int, numLettreCommission int);
                                              create table Marche(num varchar(50) primary key, numCommande varchar(50), marche varchar(50), numAO varchar(50));
                                              create table Journal(num int primary key auto_increment, fileName varchar(50), numEnvoie int, format varchar(50), fournisseur varchar(50), dateEnvoie date, datePublication date, lettreJournal longblob, numAo varchar(50));
                                              create table Facture(num int primary key auto_increment, dateFacture date, montant double, numJournal int);
                                              create table LettreCommission(num int primary key auto_increment, fileName varchar(50), numEnvoie int, dateEnvoie date, destinataire varchar(50), lettreCommission longblob);
                                              create table Dashboard(eb int, ebNV int, ebV int, ao int);
                                              create table defaultPiece(id int primary key auto_increment, name varchar(50), piece longblob);
                                              alter table EB add foreign key (numUtilisateur) references Utilisateur(immatricule);
                                              alter table Operation add foreign key (numEB) references EB(num);
                                              alter table Piece add foreign key (numEB) references EB(num);
                                              alter table AO add foreign key (numEB) references EB(num);
                                              alter table Marche add foreign key (numAO) references AO(num);
                                              alter table AO add foreign key (numLettreCommission) references LettreCommission(num);
                                              alter table Journal add foreign key (numAO) references AO(num);
                                              alter table Facture add foreign key (numJournal) references Journal(num);
                                              insert into Dashboard values(0, 0, 0, 0);
                                              insert into Utilisateur values
                                              (1, '1', '1', 'ELHAZZAZ', 'BOUBKER', 'admin@gmail.com', 'Admin', 'M.'),
                                              (2, 'raji', 'raji', 'raji', 'Mohammed', 'raji@gmail.com', 'Demandeur', 'M.'),
                                              (3, 'reda', 'reda', 'Bouamoud', 'Mohamed-Reda', 'mohamedredabouamoud@gmail.com', 'DTI', 'M.'),
                                              (4, 'aya', 'aya', 'Amrani', 'Aya', 'aya@gmail.com', 'CM', 'Mme.'),
                                              (5, 'hassan', 'hassan', 'Hassan', 'Hassan', 'hassan@gmail.com', 'DM', 'M.');"


      # ðŸ“¦ FRONTEND: Install and build React
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies (React)
        working-directory: front-app
        run: npm install

      - name: Build React app
        working-directory: front-app
        run: CI=false npm run build

      # â˜• BACKEND: Build Express project with Node
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # ou la version que tu utilises

      - name: Install dependencies
        working-directory: back-app
        run: npm install

  # Optional: Dockerize and deploy (CD)
  dockerize:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images with docker-compose
        run: docker compose build

      - name: Push Docker images to DockerHub
        run: docker compose push

